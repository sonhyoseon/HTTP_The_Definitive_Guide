
# http 개관

전 세계의 웹브라우저, 서버, 웹 애플리케이션은 모두 HTTP를 통해 서로 대화한다.
http는 현대 인터넷의 공용어 이다.

이 장에서는 http에 대해 간결하게 다룰 것이다.

## 1.1 HTTP: 인터넷의 멀티미디어 배달부

http는 전 세계의 웹 서버로부터 수많은 이미지, 텍스트, 음성, 영상 정보를 빠르고 간편하고 정확하게 사람들의 pc에 옮겨준다.
이때 http는 신뢰성 있는 데이터 전송 프로토콜을 사용하기 때문에 데이터가 손상되지 않음을 보장한다.

## 1.2 웹 클라이언트와 서버
웹 콘텐츠는 웹 서버에 존재한다. 웹 서버는 http 프로토콜로 의사소통을 하기 때문에 보통 http 서버라고 부른다.
웹 서버에서는 인터넷의 데이터를 저장하였다가 http 클라이언트가 요청한 데이터를 제공한다.
클라이언트가 서버에게 http요청을 보내면 서버는 요청된 데이터를 http응답으로 돌려주는 것이 http의 기본 구조이다.

## 1.3 리소스
웹 서버는 웹 리소스를 관리하고 제공하며 웹 리소스는 웹 콘텐츠의 원천이다.
가장 단순한 웹 리소스는 정적파일로 텍스트, 워드, html 파일 등등이 있다.

그렇다고 모든 리소스가 정적파일일 이유는 없다.
리소스는 요청에 따라 프로그램을 생성하는 프로그램이 될 수도 있다.
동적 콘텐츠 리소스는 사용자가 누구인지, 어떤 정보을 요청했는지, 언제 요청 했는지에 따라
다른 콘텐츠를 생성할 수 있다.

### 1.3.1 미디어 타입
인터넷은 수 많은 데이터 타입을 다루기에 http는 웹에서 전송되는 객체 각각에 MIME 타입이라는 데이터 포맷 라벨을 붙인다.

웹 서버에서는 모든 http 객체 데이터에 MIME 타입을 붙인다.
이때 브라우저에서 다룰 수 있는 타입인지 MINE 타입을 통해 확인한다.

MIME 타입은 사선으로 구분된 주 타입, 부 타입으로 이루어진 문자열 라벨이다.

 - HTML로 작성된 텍스트 문서 text/html
 - JPEG 이미지 image/jpeg
 - GIF 이미지 image/gif

### 1.3.2 URI
웹서버 리소스는 각자 이름일  가지고 있기 때문에 클라이언트가 원하는 리소스를 지목 할 수 있다.
서버 리소스의 이름은 통합자원 식별자 혹은 URI라고 불린다.
URI은 인터넷의 우편물 주소 같은 것으로 정보 리소스를 고유하게 식별하고 위치를 지정할 수 있다.
URI에는 URI, URN 두 종류가 있는데 두 자원 식별자에 대해 알아보자

### 1.3.3 URL
통합 자원 지시자(URL)는 리소스 식별자의 가장 흔한 형태이다.
URL은 특정 서버의 한 리소스에 대한 구체적인 위치를 서술한다.

대부분의 URL은 세 부분으로 이루어진 표준 포맷을 따른다.

- URL의 첫 번째 부분은 스킴(scheme)이라 불리는데, 리소스에 접근하기 위한 프로토콜을 서술한다.
- 두 번째 부분은 서버의 인터넷 주소를 제공한다.
- 마지막은 웹서버의 리소스를 가리킨다.

오늘날 대부분의 URI는 URL이라 보아도 무방하다.

### 1.3.4 URN
 URI의 두번째 종류는 유니폼 리소스 이름(URN) 이다. URN은 콘텐츠를 이루는 한 리소스에 대해 해당 리소스의 위치에 영향받지 않는 유일한 이름 역할을 한다.
 위치에 독립적이기 때문에 리소스를 여기저기 옮기더라도 문제없이 동작한다.
URN은 효과적인 동작을 위해 리소스의 위치 분석 인프라 지원이 필요한데 아직 그러한 인프라가 부족하기 때문에 많이 사용되지는 않지만 전망은 밝다. 

## 1.4 트랜잭션
HTTP 트랜잭션은 요청명령과 응답 결과로 구성되어 있다.
위 상호작용은 HTTP 메시지라고 불리는 정형화된 데이터 덩어리를 이용해 이루어진다.

### 1.4.1 메서드
HTTP는 http메서드라 불리는 여러가지 종류의 요청 명령을 지원한다.
모든 http 요청 메시지는 한 개의 메서드를 가지며 서버에게 어떤 동작이 취해져야 하는지 말해준다.
가장 많이 쓰이는 메서드는 
- get
- put
- delete
- post
- head
가 있다.

### 1.4.2 상태코드
모든 http 응답 메시지는 상태 코드와 함께 반환된다.
상태코드란 클라이언트에게 서버가 요청이 성공했는지 아니면 추가 조치가 필요한지 알려주는 세 자리 숫자이다. 흔히 쓰이는 코드로는 아래 세가지 코드가 있다.
- 200 성공적으로 처리되었다
- 302 리소스를 다른 곳에서 가져가야 할 때
- 404 리소스를 찾을 수 없을 때
HTTP는 각 숫자 상태 코드에 텍스트로 된 "사유 구절"도 함께 보낸다.

### 1.4.3 웹 페이지는 여러 객체로 이루어질 수 있다.
애플리케이션은 보통 하나의 작업을 수행하기 위해 여러 HTTP 트랜잭션을 수행한다.

## 1.5 메시지

웹 클라이언트에서 웹 서버로 보낸 HTTP 메시지를 요청 메시지라 부른다.
서버에서 클라이언트로 가는 메시지는 응답 메시지라고 부른다.
이외 다른 종류의 메시지는 없다.

HTTP 메시지는 다음의 세 부분으로 이루어진다.
- 시작줄 
메시지의 첫 줄은 시작줄로, 요청이라면 무엇을 해야 하는지 응답이라면 무슨 일이 일어났는지 나타낸다.
- 헤더
시작줄 다음에는 0개 이상의 헤더 필드가 이어진다.
각 헤더 필드는 쉬운 구문분석을 위해 쌍점으로 구분되어 있는 하나의 이름과 하나의 값으로 구성된다.
- 본문
빈 줄 다음에는 어떤 종류의 데이터든 들어갈 수 있는 메시지 본문이 필요에 따라 올 수 있다.
요청의 본문은 웹 서버로 데이터를 실어 보내며 응답의 본문은 클라이언트로 데이터를 반환한다.
문자열이며 구조적인 시작줄이나 헤더와 달리, 본문은 임의의 이진 데이터를 포함할 수 있다.

## 1.6 TCP 커넥션
메시지가 어떻게 TCP커넥션을 통해 한 곳에서 다른 곳으로 옮겨가는지 이야기 해보자

### 1.6.1 TCP/IP
HTTP는 애플리케이션 계층 프로토콜이다.
HTTP는 네트워크 통신의 핵심적인 세부사항에 대해서 신경 쓰지 않으며 이를 TCP/IP에게 맡긴다.
TCP는 다음을 제공한다.
- 오류없는 데이터 전송
- 순서에 맞는 전달
- 조각나지 않는 데이터 스트림
인터넷 자체가 전 세계의 컴퓨터와 네트워크 장치들 사이에서 대중적으로 사용되는 TCP/IP에 기초하고 있다.
TCP/IP는 TCP와 IP가 층을 이루는 패킷 교환 네트워크 프로토콜의 집합이다.
TCP/IP는 각 네트워크와 하드웨어의 특성을 숨기고 서로 신뢰성 있는 의사소통을 하게 해 준다.

네트워크 개념 상 HTTP 프로토콜은 TCP 위의 계층이다. HTTP는 자신의 메시지를 전송하기 위해 TCP를 사용한다. 이와 유사하게 TCP는 IP위의 계층이다.

### 1.6.2 접속, IP주소 그리고 포트번호
HTTP 클라이언트가 서버에 메시지를 전송할 수 있게 되기 전
인터넷 프로토콜(IP) 주소와 포트번호를 사용해 클라이언트와 서버 사이에 TCP/IP 커넥션을 맺어야 한다.
이때 URL을 이용해 HTTP서버의 IP주소와 포트번호를 알아낼 수 있다.

웹 브라우저가 HTTP를 이용해 멀리 떨어진 곳에 있는 서버의 단순한 리소스를 사용자에게 보내는 절차는 다음과 같다.

 1. -   웹브라우저는 서버의 URL에서 호스트 명을 추출한다.
 2. -   웹브라우저는 서버의 호스트 명을 IP로 변환한다.
 3. -   웹브라우저는 URL에서 포트번호를 추출한다.
 4. -   웹브라우저는 웹 서버와 TCP 커넥션을 맺는다.
 5. -   웹브라우저는 서버에 HTTP 요청을 보낸다.
 6. -   서버는 웹브라우저에 HTTP 응답을 돌려준다.
 7. -   커넥션이 닫히면, 웹브라우저는 문서를 보여준다.

## 1.7 프로토콜 버전
오늘날 쓰이고 있는 HTTP 프로토콜은 버전이 여러가지이다.
HTTP 프로토콜의 여러 버전은 아래와 같다

#### HTTP/0.9
- get 메서드만 지원한다.
- 멀티미디어 콘텐츠에 대한 MIME 타입이나, HTTP 헤더, 버전 번호는 지원하지 않는다.

#### HTTP/1.0
- 널리 쓰이기 시작한 HTTP 버전이다..
- 버전번호, HTTP헤더, 추가 메서드, 멀티미디어 객체 처리를 추가하였다.

#### HTTP/1.0+
- 오래 지속되는 keep-alive 커넥션, 가상호스팅 지원, 프락시 연결 지원을 포함해 많은 기능이 공식적이진 않지만 표준으로 HTTP에 추가되었다.

#### HTTP/1.1
- HTTP 설계의 구조적 결합 교정, 두드러진 성능 최적화, 잘못된 기능 제거에 집중한 버전이다.

#### HTTP/2.0
- 성능 문제를 개선하기 위해 구글의 SPDY 프로토콜을 기반으로 설계가 진행 중이다.


## 1.8 웹의 구성요소
이 절에서 우리는 다음을 포함한 여러 애플리케이션들에 대해 간략히 설명할 것이다.

- 프락시
클라이언트와 서버 사이에 위치한 HTTP 중재자
- 캐시
많이 찾는 웹페이지를 클라이언트 가까이에 보관하는 HTTP 창고
- 게이트웨이
다른 애플리케이션과 연결된 특별한 웹 서버
- 터널
단순히 HTTP 통신을 전달하기만 하는 특별한 프락시
- 에이전트
자동화된 HTTP 요청을 만드는 준 지능적 웹 클라이언트

### 1.8.1 프락시
프락시 서버는 웹 보안, 애플리케이션 통합, 성능 최적화를 위한 중요한 구성요소이다.
프락시는 클라이언트와 서버 사이에 위치하여, 클라이언트의 모든 HTTP 요청을 받아 서버에 전달한다.
프락시는 주로 보안을 위하여 사용되며 요청과 응답을 필터링한다.

### 1.8.2 캐시
웹 캐시와 캐시 프락시는 자신을 거쳐 가는 문서들 중 자주 찾는 것의 사본을 저장해 두는 
특별한 종류의 HTTP 프락시 서버이다. 
따라서 멀리 떨어진 웹 서버보다 근처의 캐시에서 훨씬 더 빨리 문서를 다운 받을 수 있다.

### 1.8.3 게이트웨이
게이트웨이는 다른 서버들의 중개자로 동작하는 특별한 서버이다.
게이트웨이는 주로 HTTP 트래픽을 다른 프로토콜로 변환하기 위해 사용된다.
게이트웨이는 언제나 스스로 진짜 서버인 것처럼 요청을 다루기 때문에 클라이언트는
자신이 게이트웨이와 통신하고 있음을 알아채지 못한다

### 1.8.4 터널
터널은 두 커넥션 사이에서 날(raw) 데이터를 열어보지 않고 그대로 전달해주는 http 애플리케이션이다.
HTTP 터널은 주로 비 HTTP 데이터를 하나 이상의 HTTP 연결을 통해 그대로 전송해주기 위해 사용된다.

### 1.8.5 에이전트
사용자 에이전트는 사용자를 위해 HTTP 요청을 만들어주는 클라이언트 프로그램이다.
웹 요청을 만드는 애플리케이션은 뭐든 HTTP 에이전트이다.

